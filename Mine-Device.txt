#include <stdlib.h>
#include "WiFi.h"
#include <Wire.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <ESPmDNS.h>
#include <HTTPClient.h>
#include <FirebaseESP32.h>
#include  <WiFi.h>
#include "DHT.h"
#include "MAX30105.h"
#include "time.h"

#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>

BlynkTimer timer;
MAX30105 particleSensor;

//#define FIREBASE_HOST "go-mine-85a32-default-rtdb.firebaseio.com"
//#define FIREBASE_Authorization_key "0ZHoDg8x3hLdjG2pyvb3ntaUStuLV1OPA7bWazOA"

#define FIREBASE_Authorization_key "euDB3Coml1tifCgWCMXayU5zt2DhZSIHqMxNoeVI"
#define FIREBASE_HOST "database-ands-default-rtdb.firebaseio.com"

const char* ssid = "DaGGeR";
const char* password = "12345678";
char auth[] = "wdzSxn6RwBg1NoPIlTVtua4nNqJC5_v6";
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 19800;
const int   daylightOffset_sec = 0;
String GOOGLE_SCRIPT_ID = "AKfycbw5DKfXFv_flC9TWI0cS6zsyURYwRlWlKB7jmGmnwR-6P6RhXbtyW-iJSMX9AMYgbYadg";    // change Gscript ID

int count = 0;

#define DHTTYPE DHT11
#define DHTPIN 27
#define ONE_WIRE_BUS 4
#define SOUND_SPEED 0.034
#define MQ2 35
#define GREEN 16
#define RED 17
int sensorValue = 0;
int ir=13; 
int led=14; 


FirebaseData firebaseData;
FirebaseJson json;

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

String temperatureF = "";
String temperatureC = "";
String rtemperature = "";
String rhumidity = "";
String distance = "";
String gas = "";
String bpm = "";
String irs = "";
String bo = "";


unsigned long lastTime = 0;  
unsigned long timerDelay = 10;
DHT dht(DHTPIN, DHTTYPE);
const int trigPin = 5;
const int echoPin = 18;
long duration;


String readDHTTemperature() {

  float t = dht.readTemperature();

  if (isnan(t)) {    
    Serial.println("Failed to read from DHT sensor!");
    return "00";
  }
  else {
    Serial.print("Mine Temperature: ");
    Serial.println(t);
    Firebase.setFloat(firebaseData, "/ESP32_APP/TEMPERATURE", t);
//    delay(200);

     if (t > 27)
  {
    Blynk.notify("Alert!! Temperature Rising!!");
//    digitalWrite(led, HIGH);
  }
//  else
//    digitalWrite(led, LOW);
    
  }
    return String(t);
  
}

String readDHTHumidity() {
  
  float h = dht.readHumidity();
  if (isnan(h)) {
    Serial.println("Failed to read from DHT sensor!");
    return "00";
  }
  else {
    Serial.print("Mine Humidity: ");
    Serial.println(h);
    Firebase.setFloat(firebaseData, "/ESP32_APP/HUMIDITY", h);
//    delay(200);

     if (h > 80)
  {
    Blynk.notify("Alert!! Humidity Rising!!");
//    digitalWrite(led, HIGH);
  }
//    else
//    digitalWrite(led, LOW);
  }
    return String(h);
  
}

//String readDSTemperatureC() {
//  // Call sensors.requestTemperatures() to issue a global temperature and Requests to all devices on the bus
//  sensors.requestTemperatures(); 
//  float tempC = sensors.getTempCByIndex(0);
//
//  if(tempC == -127.00) {
//    Serial.println("Failed to read from DS18B20 sensor");
//    return "00";
//  } else {
//    Serial.print("Body Temperature Celsius: ");
//    Serial.println(tempC); 
//    Firebase.setFloat(firebaseData, "/ESP32_APP/BODY TEMPERATURE in C", tempC);
////    delay(200);
//
//     if (tempC > 27)
//  {
//    Blynk.notify("Alert!! Harmful Body Temperature!!");
//  }
//  }
//  return String(tempC);
//}
//
//String readDSTemperatureF() {
//  // Call sensors.requestTemperatures() to issue a global temperature and Requests to all devices on the bus
//  sensors.requestTemperatures(); 
//  float tempF = sensors.getTempFByIndex(0);
//
//  if(int(tempF) == -196){
//    Serial.println("Failed to read from DS18B20 sensor");
//    return "00";
//  } else {
//    Serial.print("Body Temperature Fahrenheit: ");
//    Serial.println(tempF);
//    Firebase.setFloat(firebaseData, "/ESP32_APP/BODY TEMPERATURE in F", tempF);
////    delay(200);
//
//    if (tempF > 83)
//  {
//    Blynk.notify("Alert!! Harmful Body Temperature!!");
//  }
//  }
//  return String(tempF);
//}

String readDistance(){

  float distanceCm;

  digitalWrite(trigPin, LOW);
  delayMicroseconds(5);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
 
  duration = pulseIn(echoPin, HIGH);
  
  distanceCm = duration * SOUND_SPEED/2;

  if (distanceCm < 1)
  {
    Serial.println("Ultrasonic Sensor not detected");
    return "00";
  }

  else
  {
 
  Serial.print("Water Level: ");
  Serial.println(distanceCm);
   Firebase.setFloat(firebaseData, "/ESP32_APP/WATER LEVEL in cm", distanceCm);
//    delay(200);

   if (distanceCm < 5)
  {
    Blynk.notify("Water is Rising Rapidly !!");
  }
  }

   return String(distanceCm);
   
}

String sendUptime(){

  float sensorValue;
  
  sensorValue = analogRead(MQ2);
  Blynk.virtualWrite(V1, sensorValue);
  Serial.print("Gas Level: ");
  Serial.println(sensorValue);
  Firebase.setFloat(firebaseData, "/ESP32_APP/GAS LEVEL", sensorValue);
//  delay(200);

  if (sensorValue > 500)
  {
    Blynk.notify("Gas Detected!");
    digitalWrite(GREEN, LOW);
    digitalWrite(RED, HIGH);
    digitalWrite(led, HIGH);
  }

  else
  {
    digitalWrite(GREEN, HIGH);
    digitalWrite(RED, LOW);
    digitalWrite(led, LOW);
  }

  return String(sensorValue);
}



String processor(const String& var){
  Serial.println(var);
  if(var == "TEMPERATURE"){
    return rtemperature;
  }
  else if(var == "HUMIDITY"){
    return rhumidity;
  }
//  else if(var == "TEMPERATUREC"){
//    return temperatureC;
//  }
//  else if(var == "TEMPERATUREF"){
//    return temperatureF;
//  }
  else if(var == "DISTANCE"){
   return distance;
  }
  else if(var == "GAS"){
   return gas;
  } 
//  else if(var == "BPM"){
//   return bpm;
//  }
//  else if(var == "IRS"){
//   return irs;
//  } 
  return String();
}

void setup(){
  // Serial port for debugging purposes
  Serial.begin(115200);


  dht.begin();
  sensors.begin();

   Serial.println();
   Firebase.begin(FIREBASE_HOST,FIREBASE_Authorization_key);

     // Connect to Wi-Fi
  WiFi.begin (ssid, password);
  Blynk.begin(auth, ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Print ESP32 Local IP Address
  Serial.println(WiFi.localIP());
  if(!MDNS.begin("esp32")) {
     Serial.println("Error starting mDNS");
     return;
  }

    Serial.println(WiFi.localIP());

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(MQ2, INPUT);
  pinMode(GREEN, OUTPUT);
  pinMode(RED, OUTPUT);
  pinMode(ir, INPUT);
  pinMode(led, OUTPUT);


  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
}
 
void loop(){

  Blynk.run();
  timer.run();
  
  if ((millis() - lastTime) > timerDelay) {
//    temperatureC = readDSTemperatureC();
//    temperatureF = readDSTemperatureF();
    distance = readDistance();
    rhumidity = readDHTHumidity();
    rtemperature = readDHTTemperature();
    gas = sendUptime();

  
//    bpm = readBPM();
//    irs = readIRS();
    lastTime = millis();
  }  

  if (WiFi.status() == WL_CONNECTED) {
    static bool flag = false;
    struct tm timeinfo;
    if (!getLocalTime(&timeinfo)) {
      Serial.println("Failed to obtain time");
      return;
    }
    char timeStringBuff[50]; //50 chars should be enough
    strftime(timeStringBuff, sizeof(timeStringBuff), "%A, %B %d %Y %H:%M:%S", &timeinfo);
    String asString(timeStringBuff);
    asString.replace(" ", "-");
    Serial.print("Time:");
    Serial.println(asString);
    String urlFinal = "https://script.google.com/macros/s/"+GOOGLE_SCRIPT_ID+"/exec?"+"date=" + asString + "&mtemp=" + rtemperature + "&mhum=" + rhumidity + "&wlevel=" + distance + "&glevel=" + gas;
    Serial.print("POST data to spreadsheet:");
    Serial.println(urlFinal);
    HTTPClient http;
    http.begin(urlFinal.c_str());
    http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);
    int httpCode = http.GET(); 
    Serial.print("HTTP Status Code: ");
    Serial.println(httpCode);
    //---------------------------------------------------------------------
    //getting response from google sheet
    String payload;
    if (httpCode > 0) {
        payload = http.getString();
        Serial.println("Payload: "+payload);    
    }
    //---------------------------------------------------------------------
    http.end();
  }
  count++;
//  delay(10);

}
